version: 2.1

orbs:
  win: circleci/windows@2.4.0

jobs:

  test_windows:
    executor:
      name: win/default
      size: "medium"
    steps:
      - checkout
      - restore_cache:
          keys:
            - old-{{ checksum "requirements/testwindows.txt" }}
      - run:
          name: "Install Dependencies"
          command: |
            pip.exe uninstall -y python-magic
            pip.exe install -r requirements\testwindows.txt
            pip.exe install -e .
      - save_cache:
          key: old-{{ checksum "requirements/testwindows.txt" }}
          paths:
            - C:\tools\miniconda3\lib\site-packages
      - run:
          name: "Run Tests"
          environment:
            OLD_NAME_TESTS: "oldtests"
            OLD_PERMANENT_STORE: "test-store"
            OLD_TESTING: "1"
            OLD_DB_RDBMS: "sqlite"
            OLD_SESSION_TYPE: "file"
            SMTP_SERVER_ABSENT: "1"
          command: python -m pytest old\tests -v -x
      - run:
          name: "Run Read-only Mode Tests"
          environment:
            OLD_NAME_TESTS: "oldtests"
            OLD_PERMANENT_STORE: "test-store"
            OLD_TESTING: "1"
            OLD_READONLY: "1"
            OLD_DB_RDBMS: "sqlite"
            OLD_SESSION_TYPE: "file"
            SMTP_SERVER_ABSENT: "1"
          command: python -m pytest old\tests\functional\test_readonly_mode.py::TestReadonlyMode::test_readonly_mode -v -x

  test:
    docker:
      - image: "jrwdunham/old-pyramid:2021-07-01"
        environment:
          OLD_DB_RDBMS: "mysql"
          OLD_DB_USER: "old"
          OLD_DB_PASSWORD: "demo"
          OLD_DB_HOST: "127.0.0.1"
          OLD_DB_PORT: "3306"
          OLD_NAME_TESTS: "oldtests"
          OLD_PERMANENT_STORE: "/var/old/store"
          OLD_SESSION_LOCK_DIR: "/var/old/data/sessions/lock"
          OLD_PORT: "8000"
          OLD_PASSWORD_RESET_SMTP_SERVER: "10.0.0.1"
      - image: "percona:5.6"
        environment:
          MYSQL_ROOT_PASSWORD: "12345"
    steps:
      - checkout
      - run:
          name: "install dockerize"
          command: "curl -L https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz --output dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz"
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: "Wait for DB"
          command: "dockerize -wait tcp://localhost:3306 -timeout 1m"
      - run:
          name: "Create Mysql test databases"
          command: "mysql -h 127.0.0.1 -u root -p12345 -e \"DROP DATABASE IF EXISTS oldtests; CREATE DATABASE oldtests DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_bin; GRANT ALL ON oldtests.* TO 'old'@'%' IDENTIFIED BY 'demo'; DROP DATABASE IF EXISTS oldtests2; CREATE DATABASE oldtests2 DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_bin; GRANT ALL ON oldtests2.* TO 'old'@'%' IDENTIFIED BY 'demo';\""
      - run:
          name: "Setup custom environment variables"
          command: echo 'export SMTP_SERVER_ABSENT="1"' >> $BASH_ENV
      - run:
         name: "Run the OLD tests"
         environment:
           OLD_NAME_TESTS: "oldtests"
           OLD_NAME_2_TESTS: "oldtests2"
           OLD_PERMANENT_STORE: "/var/old/store"
           OLD_TESTING: 1
           SMTP_SERVER_ABSENT: "1"
         command: "/venv/bin/pytest old/tests/ -v"
      - run:
          name: "Run Read-only Mode Tests"
          environment:
            OLD_NAME_TESTS: "oldtests"
            OLD_PERMANENT_STORE: "test-store"
            OLD_TESTING: "1"
            OLD_READONLY: "1"
            OLD_DB_RDBMS: "sqlite"
            OLD_SESSION_TYPE: "file"
            SMTP_SERVER_ABSENT: "1"
          command: "/venv/bin/pytest old/tests/functional/test_readonly_mode.py::TestReadonlyMode::test_readonly_mode -v"

  build:
    docker:
      - image: cimg/base:2022.01
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            TAG="${CIRCLE_SHA1}"
            docker build -t jrwdunham/old-pyramid:$TAG .
            echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_LOGIN}" --password-stdin
            docker push jrwdunham/old-pyramid:$TAG

  deploy-prod:
    docker:
      - image: cimg/base:2022.01
    steps:
      - checkout
      - run: ssh -oStrictHostKeyChecking=no -v $DROPLET_USER@$DROPLET_IP "/home/jrwdunham/deployold.sh ${CIRCLE_SHA1}"

workflows:
  version: 2
  test_windows:
    jobs:
      - test_windows:
          filters:
            branches:
              only: /^windows.*$/

  test-build-and-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
          context:
            - General
          filters:
            branches:
              only: master
      - deploy-prod:
          requires:
            - build
          context:
            - General
          filters:
            branches:
              only: master
